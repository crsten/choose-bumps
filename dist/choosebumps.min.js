"use strict";function ChooseBumps(e,t){function n(){this.element=e,C.classList.add("choosebumps"),C.setAttribute("tabindex",0),C.getAttribute("placeholder")&&(Y.placeholder=C.getAttribute("placeholder")),y(),A.call(this,t||{})}function r(e){return"string"!=typeof e?console.error("Placeholder must be a string."):(H=e,void C.querySelector(".cb-main-item").setAttribute("placeholder",H))}function c(e){M=!!e,M&&"object"===("undefined"==typeof N?"undefined":_typeof(N))&&N&&(N=[N])}function o(e){e===!0?(L(),C.classList.add("cb-active"),k.scrollTop=0,document.addEventListener("click",o),document.addEventListener("keydown",i),h(),j=!0):(m(),C.classList.remove("cb-active"),document.removeEventListener("click",o),document.removeEventListener("keydown",i),I=null,j=!1)}function i(e){switch(new RegExp("38|40|13").test(e.keyCode)&&e.preventDefault(),e.keyCode){case 38:e.preventDefault(),s();break;case 40:e.preventDefault(),u();break;case 13:if("function"==typeof G&&I===-1)return G(e.target.value),e.target.value="";if(I<0)return;d(W[parseInt(k.children[I].getAttribute("data-id"),10)],!0),I=null}}function l(e,t,n){n&&n.stopPropagation(),N&&N.constructor===Array?(N.splice(N.indexOf(e),1),N.length||(N=null)):N=null,N||C.querySelector(".cb-main-item").classList.add("cb-placeholder"),U&&t&&U(e),v(),L()}function u(){null===I&&(I=-1);var e=k.children.length-1;I=I<e?I+1:e,f()}function s(){k.children.length-1;I=I?I-1:null,f()}function a(){if(I&&!(I<0)){var e=k.children[I],t=k.scrollTop,n=k.scrollTop+k.clientHeight,r=e.offsetTop,c=e.offsetTop+e.clientHeight;r<t?k.scrollTop=e.offsetTop:c>n&&(k.scrollTop=c-k.clientHeight)}}function f(){var e=k.querySelector(".cb-selected");e&&e.classList.remove("cb-selected");var t=k.children[I];t&&t.classList.add("cb-selected"),a()}function d(e,t,n){C.querySelector(".cb-main-item").classList.remove("cb-placeholder"),m(),M?(N&&N.indexOf(e)<0?N.push(e):N=[e],L(),n&&n.stopPropagation(),h()):(N=e,o(!1)),J&&t&&J(e),v()}function p(e){O=!!e,O?!function(){C.classList.add("cb-search-enabled");var e=document.createElement("input");e.className="cb-search",e.setAttribute("type","text"),e.setAttribute("size",1),e.setAttribute("autocomplete","off"),e.addEventListener("keyup",function(t){k.removeAttribute("no-results-text"),new RegExp("38|40|13").test(t.keyCode)===!1&&this.value.length>=V&&(X&&clearTimeout(X),X=setTimeout(function(){g(e.value,function(t){/{{.*}}/gi.test(Q)&&(W=t),!W.length&&z&&k.setAttribute("no-results-text",z.replace("{{query}}",e.value)),L(t),I=null,u()})},200))}),e.addEventListener("keypress",function(){this.setAttribute("size",this.value.length+1)}),C.querySelector(".cb-main-item").appendChild(e)}():C.classList.remove("cb-search-enabled")}function m(){O&&(C.querySelector(".cb-search").value="")}function h(){O&&C.querySelector(".cb-search").focus()}function g(e,t){function n(e){return Object.keys(e).reduce(function(t,c){var o=!1;return o="object"===_typeof(e[c])?n(e[c]):r.test(e[c]),o&&(t=!0),t},!1)}if(!e)return W;var r=new RegExp(e,"i");/{{.*}}/gi.test(Q)?b(Q.replace(/{{query}}/,e),t):t(W.filter(function(e){if(B){var t=!1;return B.split(" ").forEach(function(n){var c=n.split("."),o=c.reduce(function(e,t){return e[t]},e);r.test(o)&&(t=!0)}),t}return"string"==typeof e?r.test(e):n(e)}))}function y(){var e=document.createElement("div");e.className="cb-main-item cb-placeholder trigger";var t='<svg class="cb-caret trigger" viewBox="0 0 512 512" height="20" width="20">\n\t\t\t\t\t\t<path class="trigger" d="m508 108c-4-4-11-4-15 1l-237 271l-237-271c-4-5-11-5-15-1c-5 4-5 10-1 15l245 280c2 3 5 4 8 4c3 0 6-1 8-4l245-280c4-5 4-11-1-15z"></path>\n\t\t\t\t\t</svg>';e.innerHTML+=t,C.appendChild(e),k=document.createElement("div"),k.className="cb-items",C.appendChild(k),w=document.createElement("div"),w.className="cb-loader",C.appendChild(w),C.querySelector(".cb-main-item").addEventListener("click",function(e){e.stopPropagation(),o(!j)})}function v(){var e=C.querySelector(".cb-main-item");if(M){if([].slice.call(C.querySelectorAll(".cb-main-item .cb-tag")).forEach(function(t){e.removeChild(t)}),!N)return;N.forEach(function(t){var n=document.createElement("div");n.className="cb-tag",n.innerHTML=S(t,_||R)+'<svg viewBox="0 0 512 512">\n\t\t\t\t\t\t<path d="m271 256l238-238c4-4 4-11 0-15c-4-4-11-4-15 0l-238 238l-238-238c-4-4-11-4-15 0c-4 4-4 11 0 15l238 238l-238 238c-4 4-4 11 0 15c2 2 5 3 8 3c2 0 5-1 7-3l238-238l238 238c2 2 5 3 7 3c3 0 6-1 8-3c4-4 4-11 0-15z"></path>\n\t\t\t\t\t</svg>',n.querySelector("svg").addEventListener("click",l.bind(null,t,!0)),e.insertBefore(n,e.children[e.children.length-1])})}else{if(!N)return[].slice.call(e.querySelectorAll(".cb-selected-item,.cb-tag")).forEach(function(t){return e.removeChild(t)});var t=document.createElement("div");t.className="cb-selected-item",t.innerHTML=S(N,D||R);var n=C.querySelector(".cb-selected-item");n&&e.removeChild(n),e.insertBefore(t,e.children[e.children.length-1])}}function b(e,t){K&&(K.abort(),E(!1)),K=new XMLHttpRequest,K.open("GET",e),K.onreadystatechange=function(){4==this.readyState&&(E(!1),this.status>=200&&this.status<400&&(t(F?F(JSON.parse(this.responseText)):JSON.parse(this.responseText)),K=null))},K.send(),E(!0)}function E(e){e?(w.style.display="block",C.querySelector(".cb-caret").style.display="none"):(w.style.display="",C.querySelector(".cb-caret").style.display="")}function L(e){k.innerHTML="",P&&(W=W.sort(function(e,t){return x(P,e)<x(P,t)?-1:x(P,e)>x(P,t)?1:0}));var t=null;W.forEach(function(n,r){if(!(e&&e.indexOf(n)<0||M&&N&&N.indexOf(n)>-1||!M&&N===n)){var c=document.createElement("div");c.setAttribute("data-id",r),c.innerHTML=S(n,R),c.addEventListener("click",d.bind(null,n,!0)),!P||t&&x(P,t)===x(P,n)||c.setAttribute("category",x(P,n)),t=n,k.appendChild(c)}})}function S(e,t){for(var n=/{{data\.?(.+?)?}}/,r=void 0;r=n.exec(t);){var c="",o=e;r[1]&&(c="."+r[1],o=x(r[1],e));var i=new RegExp("{{data"+c+"}}");t=t.replace(i,o)}return t}function x(e,t){return e.split(".").reduce(function(e,t){return e[t]},t)}function T(e,t){if("object"!==("undefined"==typeof e?"undefined":_typeof(e))&&"object"!==("undefined"==typeof t?"undefined":_typeof(t)))return e===t;var n=Object.getOwnPropertyNames(e),r=Object.getOwnPropertyNames(t);if(n.length!==r.length)return!1;for(var c=0;c<n.length;c++){var o=n[c];if(e[o]!==t[o])return!1}return!0}function q(){if(N&&N.constructor===Array){var e=N.slice();e.forEach(function(e){l(e,!0)})}else l(N,!0);m()}function A(e){for(var t in Y)this[t]=e[t]?e[t]:Y[t]}if(this instanceof ChooseBumps==!1)return new ChooseBumps(e,t);var C=null,k=null,w=null,O=!1,N=null,j=!1,B=null,H=null,z=null,M=!1,P=null,R="",_=null,D=null,I=null,J=null,F=null,G=null,U=null,X=null,K=null,Q=null,V=0,W=[],Y={placeholder:"Choose",items:[],search:!1,searchfields:"",noresults:"",multiple:!1,template:"{{data}}",tagtemplate:null,selectedtemplate:null,categorize:null,processing:null,minlength:null,onselect:null,onremove:null,onadd:null};return Object.defineProperties(this,{element:{get:function(){return C},set:function(e){if("string"==typeof e){var t=document.querySelector(e);t?C=t:console.error("Element not found.")}else e instanceof HTMLElement?C=e:console.error("Invalid argument")}},items:{get:function(){return Q||W},set:function(e){e instanceof Array?W=e:"string"==typeof e?(Q=e,/{{.*}}/gi.test(Q)||b(Q,function(e){W=e})):console.error("Items must be an array or URL.")}},minlength:{get:function(){return V},set:function(e){V=isNaN(e)?0:e}},search:{get:function(){return O},set:p},placeholder:{get:function(){return H},set:r},noresults:{get:function(){return z},set:function(e){z="string"==typeof e?e:null}},multiple:{get:function(){return M},set:c},selected:{get:function(){return N}},template:{get:function(){return R},set:function(e){"string"==typeof e?(R=e,L(),v()):console.error("Template must be a string.")}},tagtemplate:{get:function(){return _||R},set:function(e){"string"==typeof e&&(_=e,L(),v())}},selectedtemplate:{get:function(){return D||R},set:function(e){"string"==typeof e&&(D=e,L(),v())}},searchfields:{get:function(){return B},set:function(e){"string"==typeof e?B=e:console.error("SearchFields must be a string.")}},onselect:{get:function(){return J},set:function(e){"function"==typeof e?J=e:e||(J=null)}},processing:{get:function(){return F},set:function(e){"function"==typeof e?F=e:e||(F=null)}},onremove:{get:function(){return U},set:function(e){"function"==typeof e?U=e:e||(U=null)}},onadd:{get:function(){return G},set:function(e){"function"==typeof e?G=e:e||(G=null)}},categorize:{get:function(){return P},set:function(e){P="string"==typeof e?e:null,L()}}}),this.select=function(e){if(!e)return q();var t=W.reduce(function(t,n){return t=T(e,n)?n:t},null);t&&d(t)},this.remove=function(e){if(!e)return q();var t=W.reduce(function(t,n){return t=T(e,n)?n:t},null);t&&l(t,!0)},this.reset=q,n.call(this),Object.freeze(this)}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};!function(e){"function"==typeof define&&define.amd?define("ChooseBumps",e):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=e:window.ChooseBumps=e}(ChooseBumps);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
