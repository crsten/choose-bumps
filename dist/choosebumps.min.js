"use strict";function ChooseBumps(e,t){function n(){this.element=e,x.classList.add("choosebumps"),x.setAttribute("tabindex",0),g(),C.call(this,t||{})}function r(e){return"string"!=typeof e?console.error("Placeholder must be a string."):(O=e,void x.querySelector(".cb-main-item").setAttribute("placeholder",O))}function c(e){j=!!e,j&&"object"===("undefined"==typeof T?"undefined":_typeof(T))&&T&&(T=[T])}function o(e){e===!0?(y(),x.classList.add("cb-active"),k.scrollTop=0,document.addEventListener("click",o),document.addEventListener("keydown",i),h(),q=!0):(m(),x.classList.remove("cb-active"),document.removeEventListener("click",o),document.removeEventListener("keydown",i),P=null,q=!1)}function i(e){switch(new RegExp("38|40|13").test(e.keyCode)&&e.preventDefault(),e.keyCode){case 38:e.preventDefault(),s();break;case 40:e.preventDefault(),u();break;case 13:if("function"==typeof _&&-1===P)return _(e.target.value),e.target.value="";if(0>P)return;d(D[parseInt(k.children[P].getAttribute("data-id"),10)],!0),P=null}}function l(e,t,n){n&&n.stopPropagation(),T.constructor===Array?(T.splice(T.indexOf(e),1),T.length||(T=null)):T=null,T||x.querySelector(".cb-main-item").classList.add("cb-placeholder"),R&&t&&R(e),b(),y()}function u(){null===P&&(P=-1);var e=k.children.length-1;P=e>P?P+1:e,f()}function s(){k.children.length-1;P=P?P-1:null,f()}function a(){if(P&&!(0>P)){var e=k.children[P],t=k.scrollTop,n=k.scrollTop+k.clientHeight,r=e.offsetTop,c=e.offsetTop+e.clientHeight;t>r?k.scrollTop=e.offsetTop:c>n&&(k.scrollTop=c-k.clientHeight)}}function f(){var e=k.querySelector(".cb-selected");e&&e.classList.remove("cb-selected");var t=k.children[P];t&&t.classList.add("cb-selected"),a()}function d(e,t,n){x.querySelector(".cb-main-item").classList.remove("cb-placeholder"),m(),j?(T&&T.indexOf(e)<0?T.push(e):T=[e],y(),n&&n.stopPropagation(),h()):(T=e,o(!1)),M&&t&&M(e),b()}function p(e){if(w=!!e){x.classList.add("cb-search-enabled");var t=document.createElement("input");t.className="cb-search",t.setAttribute("type","text"),t.setAttribute("size",1),t.setAttribute("autocomplete","off"),t.addEventListener("keyup",function(e){new RegExp("38|40|13").test(e.keyCode)===!1&&(y(v(this.value)),P=null,u())}),t.addEventListener("keypress",function(){this.setAttribute("size",this.value.length+1)}),x.querySelector(".cb-main-item").appendChild(t)}else x.classList.remove("cb-search-enabled")}function m(){w&&(x.querySelector(".cb-search").value="")}function h(){w&&x.querySelector(".cb-search").focus()}function v(e){function t(e){return Object.keys(e).reduce(function(r,c){var o=!1;return o="object"===_typeof(e[c])?t(e[c]):n.test(e[c]),o&&(r=!0),r},!1)}if(!e)return D;var n=new RegExp(e,"i");return D.filter(function(e){if(A){var r=!1;return A.split(" ").forEach(function(t){var c=t.split("."),o=c.reduce(function(e,t){return e[t]},e);n.test(o)&&(r=!0)}),r}return"string"==typeof e?n.test(e):t(e)})}function g(){var e=document.createElement("div");e.className="cb-main-item cb-placeholder trigger";var t='<svg class="cb-caret trigger" viewBox="0 0 512 512" height="20" width="20">\n						<path class="trigger" d="m508 108c-4-4-11-4-15 1l-237 271l-237-271c-4-5-11-5-15-1c-5 4-5 10-1 15l245 280c2 3 5 4 8 4c3 0 6-1 8-4l245-280c4-5 4-11-1-15z"></path>\n					</svg>';e.innerHTML+=t,x.appendChild(e),k=document.createElement("div"),k.className="cb-items",x.appendChild(k),x.querySelector(".cb-main-item").addEventListener("click",function(e){e.stopPropagation(),o(!q)})}function b(){var e=x.querySelector(".cb-main-item");if(j){if([].slice.call(x.querySelectorAll(".cb-main-item .cb-tag")).forEach(function(t){e.removeChild(t)}),!T)return;T.forEach(function(t){var n=document.createElement("div");n.className="cb-tag",n.innerHTML=E(t,z||H)+'<svg viewBox="0 0 512 512">\n						<path d="m271 256l238-238c4-4 4-11 0-15c-4-4-11-4-15 0l-238 238l-238-238c-4-4-11-4-15 0c-4 4-4 11 0 15l238 238l-238 238c-4 4-4 11 0 15c2 2 5 3 8 3c2 0 5-1 7-3l238-238l238 238c2 2 5 3 7 3c3 0 6-1 8-3c4-4 4-11 0-15z"></path>\n					</svg>',n.querySelector("svg").addEventListener("click",l.bind(null,t,!0)),e.insertBefore(n,e.children[e.children.length-1])})}else{if(!T)return[].slice.call(e.querySelectorAll(".cb-selected-item,.cb-tag")).forEach(function(t){return e.removeChild(t)});var t=document.createElement("div");t.className="cb-selected-item",t.innerHTML=E(T,N||H);var n=x.querySelector(".cb-selected-item");n&&e.removeChild(n),e.insertBefore(t,e.children[e.children.length-1])}}function y(e){k.innerHTML="",B&&(D=D.sort(function(e,t){return L(B,e)<L(B,t)?-1:L(B,e)>L(B,t)?1:0}));var t=null;D.forEach(function(n,r){if(!(e&&e.indexOf(n)<0||j&&T&&T.indexOf(n)>-1||!j&&T===n)){var c=document.createElement("div");c.setAttribute("data-id",r),c.innerHTML=E(n,H),c.addEventListener("click",d.bind(null,n,!0)),!B||t&&L(B,t)===L(B,n)||c.setAttribute("category",L(B,n)),t=n,k.appendChild(c)}})}function E(e,t){for(var n=/{{data\.?(.+?)?}}/,r=void 0;r=n.exec(t);){var c="",o=e;r[1]&&(c="."+r[1],o=L(r[1],e));var i=new RegExp("{{data"+c+"}}");t=t.replace(i,o)}return t}function L(e,t){return e.split(".").reduce(function(e,t){return e[t]},t)}function S(){if(T.constructor===Array){var e=T.slice();e.forEach(function(e){l(e,!0)})}else l(T,!0);m()}function C(e){for(var t in I)this[t]=e[t]?e[t]:I[t]}if(this instanceof ChooseBumps==!1)return new ChooseBumps(e,t);var x=null,k=null,w=!1,T=null,q=!1,A=null,O=null,j=!1,B=null,H="",z=null,N=null,P=null,M=null,_=null,R=null,D=[],I={placeholder:"Choose",items:[],search:!1,searchfields:"",multiple:!1,template:"{{data}}",tagtemplate:null,selectedtemplate:null,categorize:null,onselect:null,onremove:null,onadd:null};return Object.defineProperties(this,{element:{get:function(){return x},set:function(e){if("string"==typeof e){var t=document.querySelector(e);t?x=t:console.error("Element not found.")}else e instanceof HTMLElement?x=e:console.error("Invalid argument")}},items:{get:function(){return D},set:function(e){e instanceof Array?D=e:console.error("Items must be an array.")}},search:{get:function(){return w},set:p},placeholder:{get:function(){return O},set:r},multiple:{get:function(){return j},set:c},selected:{get:function(){return T}},template:{get:function(){return H},set:function(e){"string"==typeof e?(H=e,y(),b()):console.error("Template must be a string.")}},tagtemplate:{get:function(){return z||H},set:function(e){"string"==typeof e&&(z=e,y(),b())}},selectedtemplate:{get:function(){return N||H},set:function(e){"string"==typeof e&&(N=e,y(),b())}},searchfields:{get:function(){return A},set:function(e){"string"==typeof e?A=e:console.error("SearchFields must be a string.")}},onselect:{get:function(){return M},set:function(e){"function"==typeof e?M=e:e||(M=null)}},onremove:{get:function(){return R},set:function(e){"function"==typeof e?R=e:e||(R=null)}},onadd:{get:function(){return _},set:function(e){"function"==typeof e?_=e:e||(_=null)}},categorize:{get:function(){return B},set:function(e){B="string"==typeof e?e:null,y()}}}),this.select=function(e){function t(e,t){if("object"!==("undefined"==typeof e?"undefined":_typeof(e))&&"object"!==("undefined"==typeof t?"undefined":_typeof(t)))return e===t;var n=Object.getOwnPropertyNames(e),r=Object.getOwnPropertyNames(t);if(n.length!==r.length)return!1;for(var c=0;c<n.length;c++){var o=n[c];if(e[o]!==t[o])return!1}return!0}if(!e)return S();var n=D.reduce(function(n,r){return n=t(e,r)?r:n},null);n&&d(n)},this.reset=S,n.call(this),Object.freeze(this)}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};!function(e){"function"==typeof define&&define.amd?define("ChooseBumps",e):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=e:window.ChooseBumps=e}(ChooseBumps);
//# sourceMappingURL=data:application/json;base64,
